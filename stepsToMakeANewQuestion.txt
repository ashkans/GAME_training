To make a new question template for GAME, you need to do the following steps:
- Make the question maker:
 + Copy a question (preferably A5Q1).
 + Rename it.
 + Modify the following functions inside text_maker.py:
  o input_maker:the randomized variable should be defined here. The keys in the dataframe, will be the names which will appear in the input csv file and you can all them in the marking section.
  o tex_maker: it gets the inputs variable (exactly what was made in input_maker). The file_path is the absolute path to files folder. If you need any auxilary files (such as timeseries, you can put it there and load it within this function later. The output of this function is "tex" variable. This should be a list and each line of the list will go to a new paragraph in the tex file. 
 o you dont need to change the save_inputs function.

 + At this stage you should be able to generate the randomized question pdfs. To do so, go to the GAME_training folder, make a new setting file in the settings, by copying one of the files (e.g. A5.yaml) and modify it.

 + Run the generator like this: python generator.py settigs/{YOUR_FILENAME.yaml}. At this stage you should get the randomized question pdf.

- Make the GUI:
 + The gui normally should be placed in the result_maker folder in the quesiton template. The students at the end, need to have the structure.yaml file and the gui.py file (e.g. a5q1gui.py). The structureMaker.py is just a tool to help you to make the structure file. You can modify the structure file manually, or use a similar structureMaker.py.

 + If you are using the structureMaker.py from A5Q1 as the starting point, you dont need to change the first three lines. From that point onward, you can see each section of code is making a new line. You can add a new element to the code using gui.addElement function. 
   o The first argument is the name of the element inside the model. The result file will also save the value for the element using this key. 
   o The second element is the type of the element. It can be, textBox, dropDown, vl (vertical line), hl (horizontal line), ot text.
   o the third argumnent is the name of the function which will be shown on the gui form and does not have any significance internally in the GAME system.
   o The fourth argument is the location of the element. Note that the dropDown and textBox have two grid width as they have alabel and a input section.
   o the function also gets options and withTitle as optional, keyword arguments. The options is a place that you can provide some optional inputs for some of the element types. For example for dropDown it is the list of element that the user can select from, and for the vl and hl is the length of the line. The withTitle is True by default, but if you specify that as False, that element will not have the label printed on the form.
   o At the end, you should use the gui.save() function to generate the structure.yaml file. At this stage you can run the generator to get the yaml file.

   o to see the final gui, you need to run the gui.py file. You just need to change some variables (including a, q, and the geometry). The rest of the parts should be unchanged. At this stage you should be able to see your gui.


- Make the marking.py
 + to mark the result excel file which are generated by the students, you should make a marking.py. You normally just need to change the marker function here. I normally, use the checkValues function to check each part of the answer. It gets:
 1- the value which is provided by the student (it is inside the result variable which will be passed into the function automatically during the marking)

 2- the correct value which could be calculated based on the input variables (the randomized variables).

 3- The value name which will be used to generating the feedback string, and the comparisonType (which is an keword argument) it should be a tuple. This will tell the system how to compare the variables. The options are ('m':multiplicative, 'a':aditive, 'exact',and string).

 
 +The outputs of the function are f (the feedback string, which can be append to the feedbacks list, again the feedback list here containes a number of element which be put in seprate paragraph of the latex file); and m which will be 1, if the value is correct or 0 if the value is not correct. This will be added to the total mark. 
 + To customize the feedback string, please have a look at the marking.py in the A2Q2 temple. There are some examples there.

 + After making the marking section, you should be abale to test the marking as well by running the python marker.py settings/{YOURFILENAME.yaml} from the training folder. The yaml file here should be the same file as what you used for the generating the questions.



